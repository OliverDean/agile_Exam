{
    title: "",
    text: "",
    code: ["",""],
    image: "",
    aside: {
        label: "",
        note: ""
    }
}

{
    title: "",
    text: "",
    code: ["",""],
    image: "",
    aside: {
        label: "Routing",
        note: "Explain how a flask routes handle requests using a stateless client server architecture. You should use examples from your project"
    }
}

{
    title: "Database Initialization",
    text: "",
    code: ["rm app.db","rm -r migrations/","flask db init","flask db migrate -m 'upgrading'","flask db upgrade"],
    image: "./History_code.jpg",
    aside: {
        label: "Object Relational Mapping",
        note: "SQLAlchemy allows us to work with Relational Databases in Python efficiently and provides us with a high degree of abstraction. Models (or tables in the database) are defined as Python classes, and SQLAlchemy then allows us to interact with these tables as if they were Python objects. Creating a new row in a table is as simple as creating a new instance of a model and adding it to your session. SQLAlchemy also simplifies the task of writing complex SQL queries. In our project, for instance, we use SQLAlchemy in the 'history' route to fetch and filter questions and the user's answers from the database. This is done using methods like `Question.query.all()` or `UserQuestionAnswer.query.filter_by()`, which behind the scenes, convert these commands to raw SQL queries and execute them."
    }
}
The database is designed to be automatically created and initialized alongside the first run of the Flask application. During this initialization, the database is seeded with data via the seed_db.py Python function. However, if for some reason the database is not properly initialized or seeded, you can manually re-instantiate it. To do this, follow the steps outlined below, entering each command into a terminal located in the ./Login Page directory one at a time.


{
    title: "Virtual Environment Setup",
    text: "",
    code: ["python -m venv venv","venv\Scripts\activate","pip install -r requirements.txt"],
    image: "",
    aside: {
        label: "",
        note: ""
    }
}

{
    title: "Testing",
    text: "Testing for Selenium and python Unit Tests. From the Login page directory run:",
    code: ["python autoSelenium.py", "python -m unittest testing.unitTests"],
    image: "",
    aside: {
        label: "",
        note: ""
    }
}

In a Flask application, routes play a critical role by handling HTTP requests and responses between the client and server in a stateless architecture. Each route is a Python function that gets executed when a specific URL is accessed. This project's routes (e.g., '/login', '/register', '/logout') manage user authentication and session tracking. For instance, the '/login' route responds to both GET and POST requests. It processes the incoming user credentials and authenticates the user by querying the database. If the credentials are valid, it initializes a session for the authenticated user. The '/register' route also handles GET and POST requests, but instead of authenticating, it validates and processes user data for a new account. It checks constraints such as password length, uniqueness of the username, validity of the email, and ensures passwords match. Once data is validated, it stores the new user in the database. This routing mechanism is an example of Flask's functionality and simplicity, it allows for the efficient management of stateless client-server communication.